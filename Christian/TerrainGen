import java.util.ArrayList;
import java.util.Iterator;

public class TerrainGen {
	boolean intersect;
	int[][] map = new int[60][30];
	ArrayList<Rect> rooms = new ArrayList();
	ArrayList<Hallway> halls = new ArrayList();

	public TerrainGen(int num) {
		rooms.add(new Rect());
		boolean possible = true;
		boolean restart;

		for (int q = 1; q < num; q++) {

			restart = true;
			Rect hold = null;
			while (restart) {
				hold = new Rect();
				hold.random();
				restart = false;
				for (Rect r : rooms) {
					if (r.intersect(hold)) {
						restart = true;

					}

				}
			}
			rooms.add(hold);
		}

		int lowX = 0;
		int lowY = 0;
		for (Rect r : rooms) {
			if (r.x < lowX)
				lowX = r.x;
			if (r.y < lowY)
				lowY = r.y;
		}
		for (Rect r : rooms) {
			r.x = r.x + (Math.abs(lowX));
			r.y = r.y + (Math.abs(lowY));
		}
		System.out.println(rooms.get(0).x);

		System.out.println(rooms.get(0).y);
		for (Rect r : rooms) {
			for (int q = r.x; q < r.x + r.length - 1; q++) {
				for (int w = r.y; w < r.y + r.height - 1; w++) {
					map[q][w] = 1;
				}
			}

			for (int q = r.x + 1; q < r.x + r.length - 1; q++) {
				for (int w = r.y + 1; w < r.y + r.height - 1; w++) {
					map[q][w] = 0;
				}
			}
		}

		Iterator<Rect> it = rooms.iterator();
		map = new int[60][30];
		while (it.hasNext()) {
			Rect r = it.next();
			if (r.area < 15) {
				it.remove();
			}
		}
		System.out.println(rooms.size());

		for (Rect r : rooms) {
			for (int q = r.x; q < r.x + r.length; q++) {
				for (int w = r.y; w < r.y + r.height; w++) {
					map[q][w] = 1;
				}
			}

		}
		for (Rect r : rooms) {
			Hallway n = new Hallway(r, closest(r));
			halls.add(n);
		}
		for (int i = 0; i < 3; i++) {
			Hallway n = new Hallway(rooms.get(i), furthest(rooms.get(i)));
			halls.add(n);
		}

		for (Hallway h : halls) {
			if (Math.random() <= 1) {
				if (h.startX < h.endX)
					for (int x = h.startX; x < h.endX; x++) {
						map[x][h.startY] = 2;
					}
				if (h.startX > h.endX)
					for (int x = h.startX; x > h.endX; x--) {
						map[x][h.startY] = 2;
					}
				if (h.startY < h.endY)
					for (int y = h.startY; y < h.endY; y++) {
						map[h.endX][y] = 2;
					}
				if (h.startY > h.endY)
					for (int y = h.startY; y > h.endY; y--) {
						map[h.endX][y] = 2;
					}

			} else {

			}
		}

	}

	public Rect closest(Rect r) {
		Rect close = rooms.get(0);
		double dclose = 1000;
		double d = 0;

		for (Rect q : rooms) {
			if (q.equals(r)) {

			} else {

				d = Math.abs((r.midX - q.midX) + (r.midY - q.midY));
				if (d < dclose) {
					close = q;
					dclose = d;
				}
			}

		}
		return close;

	}

	public Rect furthest(Rect r) {
		Rect close = rooms.get(0);
		double dclose = 0;
		double d = 0;

		for (Rect q : rooms) {
			if (q.equals(r)) {

			} else {

				d = Math.abs((r.midX - q.midX) + (r.midY - q.midY));
				if (d > dclose) {
					close = q;
					dclose = d;
				}
			}

		}
		return close;

	}

}
