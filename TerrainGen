import java.util.ArrayList;
import java.util.Iterator;

public class TerrainGen {
	boolean intersect;
	int[][] map = new int[60][30];
	ArrayList<Rect> rooms = new ArrayList();
	ArrayList<Hallway> halls = new ArrayList();

	public TerrainGen(int num) {
		rooms.add(new Rect());
		boolean possible = true;
		boolean restart = true;
		Rect hold = new Rect();
		// makes a number of rooms = num
		for (int q = 0; q < num; q++) {
			restart = true;
			// finds a Rect that doesn't overlap any others
			while (restart) {
				restart = false;
				hold = new Rect();
				for (Rect r : rooms) {
					if (r.intersect(hold)) {
						restart = true;
					}
				}
			}
			// adds it to the list
			rooms.add(hold);
			// does that whole thing 'num' times
		}

	Iterator<Rect> it = rooms.iterator();
		
		while (it.hasNext()) {
			Rect r = it.next();
			if (r.area < 15||r.getHeight()<3||r.getLength()<3) {
				it.remove();
				
			}
		}
		// saves all the rooms as 1's and 0's in the 2Darray that is passed back
		// 1 is a tile, 0 is a wall
		//this works and I don't know why
		for (Rect r : rooms) {
			for (int q = r.x; q < r.x + r.length - 1; q++) {
				for (int w = r.y; w < r.y + r.height - 1; w++) {
					map[q][w] = 1;
				}
			}

			for (int q = r.x + 1; q < r.x + r.length - 1; q++) {
				for (int w = r.y + 1; w < r.y + r.height - 1; w++) {
					map[q][w] = 0;
				}
			}
		}
		for (Rect r : rooms) {
			for (int q = r.x; q < r.x + r.length; q++) {
				for (int w = r.y; w < r.y + r.height; w++) {
					map[q][w] = 1;
				}
			}
		}
		System.out.println(rooms.size());
		for (Rect r : rooms) {
			Hallway n = new Hallway(r, closest(r));
			halls.add(n);
		}
		for (int i = 0; i < 3&&i<rooms.size(); i++) {
			Hallway n = new Hallway(rooms.get(i), furthest(rooms.get(i)));
			halls.add(n);
		}

		for (Hallway h : halls) {

			if (h.startX < h.endX)
				for (int x = h.startX; x < h.endX; x++) {
					map[x][h.startY] = 2;
				}
			if (h.startX > h.endX)
				for (int x = h.startX; x > h.endX; x--) {
					map[x][h.startY] = 2;
				}
			if (h.startY < h.endY)
				for (int y = h.startY; y < h.endY; y++) {
					map[h.endX][y] = 2;
				}
			if (h.startY > h.endY)
				for (int y = h.startY; y > h.endY; y--) {
					map[h.endX][y] = 2;
				}

		}

	}
	//returns closest Rect 
	public Rect closest(Rect r) {
		Rect close = rooms.get(0);
		double dclose = 1000;
		double d = 0;

		for (Rect q : rooms) {
			if (q.equals(r)) {

			} else {

				d = Math.abs((r.midX - q.midX) + (r.midY - q.midY));
				if (d < dclose) {
					close = q;
					dclose = d;
				}
			}

		}
		return close;

	}
	//returns furthest
	public Rect furthest(Rect r) {
		Rect close = rooms.get(0);
		double dclose = 0;
		double d = 0;

		for (Rect q : rooms) {
			if (q.equals(r)) {

			} else {

				d = Math.abs((r.midX - q.midX) + (r.midY - q.midY));
				if (d > dclose) {
					close = q;
					dclose = d;
				}
			}

		}
		return close;

	}

}
